LZ4 Compressed QOI:
* Simple Case: QOI, fourcc='qoif'
* LZ4 Case: QOILZ, fourcc='qol4'

Disclaimer: I did not create QOI, but did write this version.


=== Headers ===

Headers:

qoi_head {
FOURCC magic;  //00, Magic, 'qoif'
U32BE xsize;   //04, X size (big endian)
U32BE ysize;   //08, Y size (big endian)
BYTE chan;     //0C, 3=RGB, 4=RGBA
BYTE clrs;     //0D, 0=sRGB, 1=Linear RGB
//0E, Start of Data
};
//Also shared with QOLI

qoilz_head {
FOURCC magic;  //00, Magic, 'qol4'
U32BE  xsize;  //04, X size (big endian)
U32BE  ysize;  //08, Y size (big endian)
BYTE   chan;   //0C, 3=RGB, 4=RGBA
BYTE   clrs;   //0D, 0=sRGB, 1=Linear RGB
U16BE  pad;    //0E, pad / reserved
U32BE  usize;  //10, unpacked size of QOI data
U32BE  csize;  //14, packed size of QOI data
//18, Start of LZ4 Data
};

qoila_head {
FOURCC magic;  //00, Magic, 'qola'
U32BE xsize;   //04, X size (big endian)
U32BE ysize;   //08, Y size (big endian)
BYTE chan;     //0C, 3=RGB, 4=RGBA
BYTE clrs;     //0D, 0=sRGB, 1=Linear RGB
U16BE frmt;    //0E, frame-time
U32BE frames;  //10, frame count
U32BE pad1;    //14, pad
//18, U32BE frame-offsets.
};



For QOILZ with the 'qol4', an additional LZ4 compressor stage is added.
Went with LZ4 as this seemed like the most straightforward option at the moment.

In this case, the image data is first encoded as in QOI, but then an LZ stage is used to further compress the data. The encoder may just spit out a plain QOI image though if the LZ stage doesn't gain much in terms of compression.


Possible (QOLI):
* Magic: 'qoli'
* Same basic format as 'qoif', but with inline pixel-oriented LZ.


Also Possible (QOLA):
* Magic: 'qola'
* Similar encoding as 'qoli'.
** But, intended to function like an animated GIF.
* Header adds a frame-count and array of frame offsets.
* Frame-time will be specified in units of 100us.


=== QOI Data ===

The QOI data encodes pixels and pixel deltas in a byte oriented format, using a 64-entry color lookup table. Each time a new color is encoded, it is added to this lookup table. This table starts out containing all zeros.

Index into the table is a hash of the color:
* (r*3+g*5+b*7+a*11)&63

Initial starting RGBA values are R=0, G=0, B=0, A=255.

Encoded Tokens:
* 00iiiiii
** Intex into lookup table.
* 01rrggbb
** Delta to each RGB value, -2 .. 1
* 10yyyyyy rrrrbbbb
** Apply a delta (Y) to all 3 channels, -32 .. 31.
** Apply deltas to the R and B channels, -8 .. 7.
* 11rrrrrr
** Run of 1..62 repeats of the previous color (RLE).
** 63 and 64 escale to raw colors.
* 11111110 rrrrrrrr gggggggg bbbbbbbb
** Raw RGB color, keeps prior Alpha.
* 11111111 rrrrrrrr gggggggg bbbbbbbb aaaaaaaa
** Raw RGBA color.

The encoded stream is terminated by a series of seven 00 bytes and an 01 byte.


QOLI (Possible):
* 110rrrrr, RLE 1 .. 32
* 1110rrrr, RLE 32 .. 48
* 11110rrr rrrrdddd dddddddd
** Copy 4..131 pixels, within a 4K pixel window.
* 111110rr rrrrrrrr dddddddd dddddddd
** Copy 4..1027 pixels, within a 64K pixel window.
* 11111100 rrrrrrrr rrrrdddd dddddddd dddddddd
** Copy 4..4099 pixels, within a 1M pixel window.

So, QOLI will reduce the maximum RLE run from 62 to 48, to make space for the LZ match copy.

Dropped: When copying a run, the current RGBA value will be set to the final pixel from the run.

Change: When copying a run, the current RGBA will be left as-is.


=== LZ4 ===

Where, a quick summary of LZ4 is:

Tag Byte: rrrrmmmm
** rrrr: Raw Literal bytes, 0..14, High 4 bits
** mmmm: Match Length, 4..18, Low 4 bits

With a general match structure of:
* Tag [RawLength] RawBytes MatchDistance [MatchLength]

If 15 or more raw bytes are encoded, then the length field contains 1111, and an escaped length follows the tag. This consists of zero or more FF bytes (each of which adds 255 to the total length) and a final byte, which is added to the length.

So, for example:
* E0: 14 bytes
* F0 00: 15 bytes
* F0 01: 16 bytes
* F0 FE: 269 bytes
* F0 FF 00: 270 bytes


This is followed by the given number of raw bytes, which are copied to the output.

Then a match distance is encoded, as a 16-bit little-endian integer.

If the match length was 1111, then it is decoded in the same way as the raw length (just with 4 bytes added to the length).

The distance and match length are then used to copy an LZ match, where the distance indicates how far back to go for the copy (relative to the current end of the decoded data, following the preceding literal bytes). Note that copying data over itself is allowed and will result in a repeating pattern of bytes.

